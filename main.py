import asyncio
from binance.client import Client
import telebot
from datetime import datetime, timedelta

# Binance API –∫–ª—é—á–∏
api_key = '4DxOHs9FQU9SAUJLlHN397vnsUqBlt6BhLTWcKltX86mdhFbMDRVGxzFA8t9Moe4'
api_secret = '8FwRWGd7A0g176UAKjQEMVJkLMzfQLoiSDZqTBzpcEfxz8cvl4DNt1UhNV28ypmK'
client = Client(api_key, api_secret)

# Telegram Bot
bot = telebot.TeleBot('7423569961:AAG9vR0bfF-NSBcjQFgBf4JCpGw0h_YIkpI')
TELEGRAM_CHAT_ID = 6485631209  # –í–∞—à Telegram ID


# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
GROWTH_PERCENT_MIN = 4.0  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä—ñ—Å—Ç/–ø–∞–¥—ñ–Ω–Ω—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 5%)
GROWTH_PERCENT_MAX = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ—Å—Ç/–ø–∞–¥—ñ–Ω–Ω—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
TIME_INTERVAL = 30  # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ (–≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö) ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 30 —Ö–≤–∏–ª–∏–Ω
WAIT_TIME = 900  # –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ‚Äî 30 —Ö–≤–∏–ª–∏–Ω

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
signals_count = {}


# –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
async def get_all_futures_symbols():
    try:
        info = client.futures_exchange_info()  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ'—é—á–µ—Ä—Å–Ω—ñ –ø–∞—Ä–∏
        symbols = [symbol['symbol'] for symbol in info['symbols'] if
                   symbol['status'] == 'TRADING']  # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, —è–∫—ñ —Ç–æ—Ä–≥—É—é—Ç—å—Å—è
        return symbols
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö –ø–∞—Ä: {e}")
        return []


# –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
async def get_historical_price(symbol):
    try:
        klines = client.futures_klines(symbol=symbol, interval='1m',
                                       limit=31)  # –í—ñ–∑—å–º–µ–º–æ 31 —Ö–≤–∏–ª–∏–Ω—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (30 —Ö–≤–∏–ª–∏–Ω + –ø–æ—Ç–æ—á–Ω–∞)
        price_30_minutes_ago = float(klines[-31][4])  # –¶—ñ–Ω–∞ 30 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É
        current_price = float(klines[-1][4])  # –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞
        return current_price, price_30_minutes_ago
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
        return None, None


# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–º—ñ–Ω–∏ –æ–±—Å—è–≥—É (—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π) –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
async def get_investment_change(symbol):
    try:
        klines = client.futures_klines(symbol=symbol, interval='1m', limit=31)
        if len(klines) < 31:
            print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ–±—Å—è–≥—É –¥–ª—è {symbol}")
            return None
        volume_30_minutes_ago = sum(float(kline[7]) for kline in klines[:30])  # –û–±—Å—è–≥ –ø–µ—Ä—à–∏—Ö 30 —Ö–≤–∏–ª–∏–Ω
        current_volume = sum(float(kline[7]) for kline in klines[1:31])  # –û–±—Å—è–≥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 30 —Ö–≤–∏–ª–∏–Ω
        investment_change_percent = ((current_volume - volume_30_minutes_ago) / volume_30_minutes_ago) * 100
        return investment_change_percent
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ–±—Å—è–≥—É –¥–ª—è {symbol}: {e}")
        return None


# –§—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ Telegram
async def send_message(text):
    try:
        print("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram...")
        bot.send_message(TELEGRAM_CHAT_ID, text, parse_mode="HTML")
        print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")


# –§—É–Ω–∫—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—É –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É
async def message_signal(symbol, current_price, price_30_minutes_ago, percent, investment_change, signal_count,
                         recommendation):
    direction = "üü¢–†—ñ—Å—Ç" if percent > 0 else "üî¥–ü–∞–¥—ñ–Ω–Ω—è"
    trading_link = f"https://www.binance.com/en/futures/{symbol}"  # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É
    message = f"""
    <b>üö®–°–∏–≥–Ω–∞–ª –¥–ª—è: {symbol}</b>
    <b>–¶—ñ–Ω–∞ –∑–∞—Ä–∞–∑:</b> <code>{current_price:.2f} USDT</code>
    <b>–¶—ñ–Ω–∞ 30 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É:</b> <code>{price_30_minutes_ago:.2f} USDT</code>
    <b>{direction} –∑–∞ 30 —Ö–≤–∏–ª–∏–Ω:</b> <code>{abs(percent):.2f}%</code>
    <b>–ó–º—ñ–Ω–∞ –æ–±—Å—è–≥—É (—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π):</b> <code>{investment_change:.2f}%</code>
    <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b> {recommendation}
    <i>–Ü–Ω—Ç–µ—Ä–≤–∞–ª: {TIME_INTERVAL} —Ö–≤–∏–ª–∏–Ω</i>

    <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏:</b> <u>{signal_count}</u>

    <b>üîó –¢–æ—Ä–≥–æ–≤–µ–ª—å–Ω–∞ –ø–∞—Ä–∞:</b> <a href="{trading_link}">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–æ—Ä–≥—ñ–≤–ª—ñ</a>
    """
    print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ, –≥–æ—Ç–æ–≤–µ –¥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:")
    print(message)
    await send_message(message)


# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –º–æ–Ω–µ—Ç–∏
def update_signal_count(symbol):
    now = datetime.now()
    if symbol not in signals_count:
        signals_count[symbol] = []
    signals_count[symbol] = [timestamp for timestamp in signals_count[symbol] if now - timestamp < timedelta(days=1)]
    signals_count[symbol].append(now)
    return len(signals_count[symbol])


# –§—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω–Ω—è –ø–æ –ø–æ–∫—É–ø—Ü—ñ/–ø—Ä–æ–¥–∞–∂–µ
def analyze_trade_signal(percent, investment_change):
    if percent > GROWTH_PERCENT_MAX and investment_change > 15:
        return "üí•–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø—Ä–æ–¥–∞—Ç–∏: —Å–∏–ª—å–Ω–∏–π —Ä—ñ—Å—Ç —Ç–∞ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –æ–±—Å—è–≥—É"
    elif percent < -GROWTH_PERCENT_MAX and investment_change > 15:
        return "üí•–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∫—É–ø–∏—Ç–∏: —Å–∏–ª—å–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è —Ç–∞ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –æ–±—Å—è–≥—É"
    elif percent > GROWTH_PERCENT_MIN and percent <= GROWTH_PERCENT_MAX and investment_change > 5:
        return "‚ö†Ô∏è–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–æ—á–µ–∫–∞—Ç–∏: –ø–æ–º—ñ—Ä–Ω–∏–π —Ä—ñ—Å—Ç —Ç–∞ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –æ–±—Å—è–≥—É"
    elif percent < -GROWTH_PERCENT_MIN and percent >= -GROWTH_PERCENT_MAX and investment_change > 5:
        return "‚ö†Ô∏è–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–æ—á–µ–∫–∞—Ç–∏: –ø–æ–º—ñ—Ä–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è —Ç–∞ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –æ–±—Å—è–≥—É"
    elif percent > 0 and investment_change < 0:
        return "‚ö†Ô∏è–ü—Ä–æ–¥–∞–∂: —Ä—ñ—Å—Ç —Ü—ñ–Ω–∏ –ø—Ä–∏ –∑–Ω–∏–∂–µ–Ω–Ω—ñ –æ–±—Å—è–≥—É, –º–æ–∂–ª–∏–≤–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ –ø–∞–¥—ñ–Ω–Ω—è"
    elif percent < 0 and investment_change < 0:
        return "‚ö†Ô∏è–ü–æ–∫—É–ø–∫–∞: –ø–∞–¥—ñ–Ω–Ω—è —Ü—ñ–Ω–∏ –ø—Ä–∏ –∑–Ω–∏–∂–µ–Ω–Ω—ñ –æ–±—Å—è–≥—É, –º–æ–∂–ª–∏–≤–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è"
    else:
        return "‚ùì–ù–µ–º–∞—î —á—ñ—Ç–∫–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"


# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–∏
async def check_price(symbol):
    current_price, price_30_minutes_ago = await get_historical_price(symbol)
    investment_change = await get_investment_change(symbol)

    if current_price is None or price_30_minutes_ago is None or investment_change is None:
        return

    percent = ((current_price - price_30_minutes_ago) / price_30_minutes_ago) * 100

    if GROWTH_PERCENT_MIN <= abs(percent) <= GROWTH_PERCENT_MAX:
        signal_count = update_signal_count(symbol)
        recommendation = analyze_trade_signal(percent, investment_change)
        await message_signal(symbol, current_price, price_30_minutes_ago, percent, investment_change, signal_count,
                             recommendation)
    else:
        print(f"{symbol}: –ó–º—ñ–Ω–∞ {percent:.2f}% –ø–æ–∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º {GROWTH_PERCENT_MIN}% - {GROWTH_PERCENT_MAX}%")


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö –ø–∞—Ä
async def check_all_symbols():
    symbols = await get_all_futures_symbols()
    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(symbols)} –ø–∞—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
    tasks = []
    for symbol in symbols:
        tasks.append(check_price(symbol))
    await asyncio.gather(*tasks)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
async def main():
    while True:
        await check_all_symbols()
        print(f"–û—á—ñ–∫—É–≤–∞–Ω–Ω—è {TIME_INTERVAL} —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é...")
        await asyncio.sleep(WAIT_TIME)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω


if __name__ == "__main__":
    asyncio.run(main())
